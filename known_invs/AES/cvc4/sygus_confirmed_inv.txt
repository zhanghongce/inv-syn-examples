0 0 3
(!((~(m1.aes_step)) == (~(1'b0)))) ||(!((m1.aes_reg_state) == (2'b10)))
((m1.aes_reg_state) == (2'b00)) ||((m1.uaes_ctr) == ((m1.block_counter) +(m1.aes_reg_ctr)))
((m1.block_counter[15:0]) == (m1.operated_bytes_count)) ||((m1.aes_reg_state) == (2'b00))
(define-fun INV ((m1.aes_step (_ BitVec 1)) (m1.aes_reg_state (_ BitVec 2)) (m1.byte_counter (_ BitVec 4)) (m1.operated_bytes_count (_ BitVec 16)) (m1.block_counter (_ BitVec 128)) (m1.uaes_ctr (_ BitVec 128)) (m1.aes_reg_ctr (_ BitVec 128)) (m1.aes_time_enough (_ BitVec 1))) Bool (or (not (= (bvnot m1.aes_step) (bvnot #b0))) (not (= m1.aes_reg_state #b10))))
(define-fun INV ((m1.aes_step (_ BitVec 1)) (m1.aes_reg_state (_ BitVec 2)) (m1.byte_counter (_ BitVec 4)) (m1.operated_bytes_count (_ BitVec 16)) (m1.block_counter (_ BitVec 128)) (m1.uaes_ctr (_ BitVec 128)) (m1.aes_reg_ctr (_ BitVec 128)) (m1.aes_time_enough (_ BitVec 1))) Bool (or (= #b00 m1.operated_bytes_count) (= m1.uaes_ctr (+ m1.block_counter m1.aes_reg_ctr))))
(define-fun INV ((m1.aes_step (_ BitVec 1)) (m1.aes_reg_state (_ BitVec 2)) (m1.byte_counter (_ BitVec 4)) (m1.operated_bytes_count (_ BitVec 16)) (m1.block_counter (_ BitVec 128)) (m1.uaes_ctr (_ BitVec 128)) (m1.aes_reg_ctr (_ BitVec 128)) (m1.aes_time_enough (_ BitVec 1))) Bool (or (= ((_ extract 15 0) m1.block_counter) m1.operated_bytes_count) (= m1.aes_reg_state #b00)))
